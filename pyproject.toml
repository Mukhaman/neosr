[project]
name = "neosr"
version = "1.0.0"
description = "neosr is an open-source framework for training super-resolution models. It provides a comprehensive and reproducible environment for achieving state-of-the-art image restoration results, making it suitable for both the enthusiastic community, professionals and machine learning academic researchers. It serves as a versatile platform and aims to bridge the gap between practical application and academic research in the field."
requires-python = ">=3.12,<3.13"
authors = [{ name = "neosr-project", email = "132400428+neosr-project@users.noreply.github.com" }]
license = "Apache-2.0"
readme = "readme.md"
repository = "https://github.com/neosr-project/neosr"
documentation = "https://github.com/neosr-project/neosr/wiki"
dependencies = [
	"setuptools (>=75.6.0)",
	"tqdm (>=4.66.5)",
	"numpy (>=2.1.2)",
	"scipy (>=1.14.1)",
	"opencv-python-headless (>=4.10)",
	"lmdb (>=1.5.1)",
	"tb-nightly (>=2.19.0a20241004)",
	"onnx (>=1.17.0)",
	"onnxruntime-gpu (>=1.19.2)",
	"onnxconverter-common (>=1.14.0)",
	"einops (>=0.8)",
	"pywavelets (>=1.7.0)",
	"torch (>=2.5.1+cu124)",
	"torchvision (>=0.20.1+cu124)",
]

[[tool.poetry.source]]
name = "pytorch_gpu"
url = "https://download.pytorch.org/whl/cu124"
priority = "explicit"


[tool.poetry.dependencies]
torch = {source = "pytorch_gpu"}
torchvision = {source = "pytorch_gpu"}


[tool.ruff]
lint.select = ["ALL"]
lint.fixable = ["ALL"]
lint.ignore = [
    "ANN",
    "B904",
    "C90",
    "COM812",
    "CPY",
    "D",
    "DOC",
    "ERA001",
    "E501",
    "E722",
    "E741",
    "FIX",
    "FBT001",
    "FBT002",
    "G004",
    "ISC001",
    "N8",
    "PLR",
    "PLC0206",
    "PGH003",
    "S101",
    "S311",
    "S403",
    "SLF001",
    "T201",
    "TD002",
    "TD003",
]
exclude = ["*_arch.py"]
target-version = "py312"
preview = true


[tool.ruff.format]
skip-magic-trailing-comma = true
line-ending = "lf"


[tool.ruff.lint.isort]
split-on-trailing-comma = false


[tool.ruff.lint.per-file-ignores]
"neosr/__init__.py" = ["F403"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
